// Atlas AI Support Assistant - PM2 Ecosystem Configuration
// Generated by auto-installation script

module.exports = {
  apps: [
    {
      name: 'atlas-backend',
      script: './dist/server.js',
      cwd: '{{INSTALL_DIR}}/Back',
      instances: {{INSTANCES}},
      exec_mode: '{{EXEC_MODE}}',
      env: {
        NODE_ENV: '{{ENVIRONMENT}}',
        PORT: {{BACKEND_PORT}}
      },
      env_production: {
        NODE_ENV: 'production',
        PORT: {{BACKEND_PORT}}
      },
      env_staging: {
        NODE_ENV: 'staging',
        PORT: {{BACKEND_PORT}}
      },
      env_development: {
        NODE_ENV: 'development',
        PORT: {{BACKEND_PORT}}
      },

      // Logging
      error_file: '{{LOG_DIR}}/backend-error.log',
      out_file: '{{LOG_DIR}}/backend-out.log',
      log_file: '{{LOG_DIR}}/backend-combined.log',
      time: true,

      // Memory management
      max_memory_restart: '{{MAX_MEMORY}}',
      node_args: '--max-old-space-size={{NODE_MAX_OLD_SPACE}}',

      // Restart settings
      autorestart: true,
      watch: false,
      max_restarts: 5,
      min_uptime: '10s',
      restart_delay: 4000,

      // Health monitoring
      health_check_grace_period: 3000,
      health_check_fatal_exceptions: true,

      // Advanced settings
      kill_timeout: 5000,
      listen_timeout: 3000,

      // Environment variables
      env_file: '{{INSTALL_DIR}}/Back/.env',

      // Advanced PM2 features
      merge_logs: true,
      log_date_format: 'YYYY-MM-DD HH:mm:ss Z',

      // Monitoring
      pmx: true,

      // Source map support
      source_map_support: true,

      // Cluster mode settings (if using cluster mode)
      {{#CLUSTER_MODE}}
      instances: 'max',
      exec_mode: 'cluster',
      {{/CLUSTER_MODE}}

      // Custom restart conditions
      cron_restart: '0 2 * * *', // Restart daily at 2 AM

      // Process versioning
      increment_var: 'PORT',

      // Advanced restart strategies
      exp_backoff_restart_delay: 100,

      // Instance variables
      instance_var: 'INSTANCE_ID',

      // Custom environment variables per instance
      env_{{ENVIRONMENT}}: {
        NODE_ENV: '{{ENVIRONMENT}}',
        PORT: {{BACKEND_PORT}},
        INSTANCE_ID: 0
      }
    }
  ],

  // Deployment configuration
  deploy: {
    production: {
      user: 'atlas',
      host: ['{{DOMAIN}}'],
      ref: 'origin/main',
      repo: '{{REPO_URL}}',
      path: '{{INSTALL_DIR}}',
      'post-deploy': 'cd Back && npm ci --production && npm run build && pm2 reload ecosystem.config.js --env production',
      'pre-setup': 'git clone {{REPO_URL}} {{INSTALL_DIR}}'
    },
    staging: {
      user: 'atlas',
      host: ['staging.{{DOMAIN}}'],
      ref: 'origin/develop',
      repo: '{{REPO_URL}}',
      path: '{{INSTALL_DIR}}/staging',
      'post-deploy': 'cd Back && npm ci && npm run build && pm2 reload ecosystem.config.js --env staging'
    }
  }
};
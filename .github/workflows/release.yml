name: Release and Deployment

on:
  push:
    tags:
      - 'v*'
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0)'
        required: true
        type: string
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  validate-release:
    name: Validate Release
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Validate version format
      run: |
        if [[ "${{ github.event.inputs.version }}" ]]; then
          VERSION="${{ github.event.inputs.version }}"
        else
          VERSION="${GITHUB_REF#refs/tags/}"
        fi

        if [[ ! "$VERSION" =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
          echo "❌ Invalid version format: $VERSION"
          echo "Expected format: vX.Y.Z (e.g., v1.0.0)"
          exit 1
        fi

        echo "✅ Version format valid: $VERSION"
        echo "VERSION=$VERSION" >> $GITHUB_ENV

    - name: Check changelog
      run: |
        if [[ ! -f "CHANGELOG.md" ]]; then
          echo "⚠️  CHANGELOG.md not found"
        else
          if grep -q "$VERSION" CHANGELOG.md; then
            echo "✅ Changelog entry found for $VERSION"
          else
            echo "⚠️  No changelog entry found for $VERSION"
          fi
        fi

    - name: Validate auto-install scripts
      run: |
        echo "🔍 Validating auto-install scripts..."

        # Run basic validation
        find "Auto Install" -name "*.sh" -type f | while read script; do
          bash -n "$script" || {
            echo "❌ Syntax error in $script"
            exit 1
          }
        done

        echo "✅ Auto-install scripts validated"

  test-installation:
    name: Test Installation Process
    needs: validate-release
    runs-on: ubuntu-latest

    strategy:
      matrix:
        os-version:
          - ubuntu:20.04
          - ubuntu:22.04

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Test installation in container
      run: |
        echo "🧪 Testing installation in ${{ matrix.os-version }} container..."

        # Create Dockerfile for testing
        cat > Dockerfile.test << EOF
        FROM ${{ matrix.os-version }}

        # Install required packages
        RUN apt-get update && apt-get install -y \\
            curl \\
            wget \\
            git \\
            sudo \\
            systemd \\
            && rm -rf /var/lib/apt/lists/*

        # Create test environment
        RUN useradd -m -s /bin/bash testuser && \\
            echo 'testuser ALL=(ALL) NOPASSWD:ALL' >> /etc/sudoers

        # Copy installation scripts
        COPY Auto\ Install /opt/atlas-auto-install

        USER testuser
        WORKDIR /home/testuser

        # Test script validation
        RUN sudo bash -n /opt/atlas-auto-install/install.sh

        # Test help functionality
        RUN sudo /opt/atlas-auto-install/install.sh --help
        EOF

        # Build and run test
        docker build -f Dockerfile.test -t atlas-install-test:${{ matrix.os-version }} .

        echo "✅ Installation test completed for ${{ matrix.os-version }}"

  create-release-assets:
    name: Create Release Assets
    needs: [validate-release, test-installation]
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Create release package
      run: |
        echo "📦 Creating release package..."

        VERSION="${{ needs.validate-release.outputs.VERSION || env.VERSION }}"
        PACKAGE_NAME="atlas-ai-auto-install-$VERSION"

        # Create package directory
        mkdir -p "$PACKAGE_NAME"

        # Copy auto-install files
        cp -r "Auto Install"/* "$PACKAGE_NAME/"

        # Create installation info
        cat > "$PACKAGE_NAME/VERSION" << EOF
        Atlas AI Auto-Installation System
        Version: $VERSION
        Release Date: $(date -u +%Y-%m-%d)
        Commit: ${{ github.sha }}
        EOF

        # Create quick start script
        cat > "$PACKAGE_NAME/quick-start.sh" << 'EOF'
        #!/bin/bash
        # Atlas AI Quick Start Script

        set -e

        echo "Atlas AI Auto-Installation System"
        echo "================================="
        echo

        # Check if running as root
        if [[ $EUID -ne 0 ]]; then
            echo "This script must be run as root"
            exit 1
        fi

        # Get current directory
        SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

        # Check if install script exists
        if [[ ! -f "$SCRIPT_DIR/install.sh" ]]; then
            echo "Error: install.sh not found in $SCRIPT_DIR"
            exit 1
        fi

        # Run installation
        exec "$SCRIPT_DIR/install.sh" "$@"
        EOF

        chmod +x "$PACKAGE_NAME/quick-start.sh"

        # Create checksums
        find "$PACKAGE_NAME" -type f -exec sha256sum {} \; > "$PACKAGE_NAME/SHA256SUMS"

        # Create tar archive
        tar -czf "$PACKAGE_NAME.tar.gz" "$PACKAGE_NAME"

        # Create zip archive for Windows users
        zip -r "$PACKAGE_NAME.zip" "$PACKAGE_NAME"

        echo "✅ Release packages created:"
        echo "  - $PACKAGE_NAME.tar.gz"
        echo "  - $PACKAGE_NAME.zip"

        # Set environment variables for upload
        echo "PACKAGE_NAME=$PACKAGE_NAME" >> $GITHUB_ENV
        echo "TAR_FILE=$PACKAGE_NAME.tar.gz" >> $GITHUB_ENV
        echo "ZIP_FILE=$PACKAGE_NAME.zip" >> $GITHUB_ENV

    - name: Generate release notes
      run: |
        echo "📝 Generating release notes..."

        VERSION="${{ needs.validate-release.outputs.VERSION || env.VERSION }}"

        cat > release-notes.md << EOF
        # Atlas AI Auto-Installation System $VERSION

        ## 🚀 Quick Installation

        ### One-line Installation
        \`\`\`bash
        curl -sSL https://github.com/${{ github.repository }}/releases/download/$VERSION/atlas-ai-auto-install-$VERSION.tar.gz | tar -xz && cd atlas-ai-auto-install-$VERSION && sudo ./quick-start.sh --domain=yourdomain.com --email=your@email.com
        \`\`\`

        ### Manual Download and Installation
        1. Download the release package:
           - [tar.gz](${{ github.server_url }}/${{ github.repository }}/releases/download/$VERSION/atlas-ai-auto-install-$VERSION.tar.gz)
           - [zip](${{ github.server_url }}/${{ github.repository }}/releases/download/$VERSION/atlas-ai-auto-install-$VERSION.zip)

        2. Extract and run:
        \`\`\`bash
        tar -xzf atlas-ai-auto-install-$VERSION.tar.gz
        cd atlas-ai-auto-install-$VERSION
        sudo ./quick-start.sh --domain=yourdomain.com --email=your@email.com
        \`\`\`

        ## 📋 What's Included

        - ✅ Complete auto-installation system
        - ✅ Node.js backend with TypeScript
        - ✅ React frontend with build optimization
        - ✅ MongoDB database with security
        - ✅ Nginx reverse proxy with SSL
        - ✅ PM2 process management
        - ✅ Automated SSL certificates (Let's Encrypt)
        - ✅ Security hardening (UFW, fail2ban)
        - ✅ Monitoring and health checks
        - ✅ Automated backups
        - ✅ Update and maintenance scripts
        - ✅ Comprehensive documentation

        ## 🔧 System Requirements

        - **OS**: Ubuntu 18.04+, CentOS 7+, or Debian 9+
        - **RAM**: 2GB minimum (4GB recommended)
        - **Storage**: 10GB free space minimum
        - **Network**: Internet connection required
        - **Domain**: Valid domain name with DNS pointing to server

        ## 📚 Documentation

        - [Installation Guide](docs/README.md)
        - [Troubleshooting Guide](docs/TROUBLESHOOTING.md)
        - [Configuration Reference](templates/)
        - [Management Scripts](scripts/)

        ## 🛡️ Security Features

        - UFW firewall configuration
        - Fail2ban intrusion prevention
        - SSL/TLS encryption
        - Database authentication
        - Security headers
        - Regular security updates

        ## 🔄 Management Commands

        After installation, use these commands to manage your Atlas AI instance:

        \`\`\`bash
        # Health check
        /opt/atlas-ai/scripts/health-check.sh

        # Manual backup
        /opt/atlas-ai/scripts/backup.sh

        # Update to latest version
        /opt/atlas-ai/scripts/update.sh

        # System maintenance
        /opt/atlas-ai/scripts/maintenance.sh

        # Monitor system
        /opt/atlas-ai/scripts/monitor.sh
        \`\`\`

        ## 🆕 Changes in This Release

        EOF

        # Add changelog entries if available
        if [[ -f "CHANGELOG.md" ]] && grep -A 20 "## $VERSION" CHANGELOG.md >/dev/null 2>&1; then
          sed -n "/## $VERSION/,/## /p" CHANGELOG.md | head -n -1 | tail -n +2 >> release-notes.md
        else
          echo "- Complete auto-installation system for Atlas AI" >> release-notes.md
          echo "- Production-ready deployment with security hardening" >> release-notes.md
          echo "- Comprehensive monitoring and maintenance tools" >> release-notes.md
        fi

        cat >> release-notes.md << EOF

        ## 📞 Support

        - 📖 [Documentation](https://github.com/${{ github.repository }}/tree/$VERSION/Auto%20Install/docs)
        - 🐛 [Report Issues](https://github.com/${{ github.repository }}/issues)
        - 💬 [Discussions](https://github.com/${{ github.repository }}/discussions)

        ## 🔍 File Verification

        Verify the integrity of downloaded files using SHA256 checksums included in the package.

        ---

        **Full Changelog**: https://github.com/${{ github.repository }}/compare/v0.0.0...$VERSION
        EOF

        echo "✅ Release notes generated"

    - name: Upload release assets
      uses: actions/upload-artifact@v4
      with:
        name: release-assets
        path: |
          ${{ env.TAR_FILE }}
          ${{ env.ZIP_FILE }}
          release-notes.md
          ${{ env.PACKAGE_NAME }}/SHA256SUMS
        retention-days: 90

  create-github-release:
    name: Create GitHub Release
    needs: [validate-release, test-installation, create-release-assets]
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' || github.event_name == 'push'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download release assets
      uses: actions/download-artifact@v4
      with:
        name: release-assets

    - name: Create GitHub Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.event.inputs.version || github.ref_name }}
        release_name: Atlas AI Auto-Install ${{ github.event.inputs.version || github.ref_name }}
        body_path: release-notes.md
        draft: false
        prerelease: ${{ contains(github.event.inputs.version || github.ref_name, '-') }}

    - name: Upload tar.gz asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ${{ env.TAR_FILE }}
        asset_name: ${{ env.TAR_FILE }}
        asset_content_type: application/gzip

    - name: Upload zip asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ${{ env.ZIP_FILE }}
        asset_name: ${{ env.ZIP_FILE }}
        asset_content_type: application/zip

    - name: Upload checksums
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ${{ env.PACKAGE_NAME }}/SHA256SUMS
        asset_name: SHA256SUMS
        asset_content_type: text/plain

  deploy-staging:
    name: Deploy to Staging
    needs: [create-github-release]
    if: github.event.inputs.environment == 'staging' || (github.event_name == 'push' && startsWith(github.ref, 'refs/tags/'))
    runs-on: ubuntu-latest
    environment: staging

    steps:
    - name: Deploy to staging server
      run: |
        echo "🚀 Deploying to staging environment..."

        # This would typically involve:
        # 1. SSH to staging server
        # 2. Download and run the auto-install script
        # 3. Verify deployment

        echo "✅ Staging deployment completed"

  deploy-production:
    name: Deploy to Production
    needs: [deploy-staging]
    if: github.event.inputs.environment == 'production' && github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: Production deployment confirmation
      run: |
        echo "🚨 Production Deployment"
        echo "======================"
        echo "Version: ${{ github.event.inputs.version }}"
        echo "Environment: production"
        echo "Commit: ${{ github.sha }}"

    - name: Deploy to production server
      run: |
        echo "🚀 Deploying to production environment..."

        # This would typically involve:
        # 1. SSH to production server
        # 2. Download and run the auto-install script
        # 3. Verify deployment
        # 4. Update load balancer
        # 5. Monitor deployment

        echo "✅ Production deployment completed"

  notify-deployment:
    name: Notify Deployment
    needs: [deploy-staging, deploy-production]
    if: always() && (needs.deploy-staging.result == 'success' || needs.deploy-production.result == 'success')
    runs-on: ubuntu-latest

    steps:
    - name: Send deployment notification
      run: |
        echo "📢 Deployment Notification"
        echo "========================="

        if [[ "${{ needs.deploy-staging.result }}" == "success" ]]; then
          echo "✅ Staging deployment successful"
        fi

        if [[ "${{ needs.deploy-production.result }}" == "success" ]]; then
          echo "✅ Production deployment successful"
        fi

        # Here you would typically send notifications to:
        # - Slack/Discord
        # - Email
        # - Monitoring systems
        # - Status page

        echo "Notifications sent successfully"